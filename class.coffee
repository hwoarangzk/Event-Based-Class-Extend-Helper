Clazz = ->
	klass = ->
		@initialize.apply this, arguments
	klass::initialize = ->
	klass.extend = (options) ->
		klass::[key] = value for key, value of options
		klass
	klass

Class = Clazz()

Event = Class.extend
	initialize: ->
		@events = {}
		###
			because coffee script always adds a return at the last line in a function
			undefined is added here to avoid returning an object
			which is not generated by the defined constructor
		###
		undefined
	on: (type, fn) ->
		@events || @events = {}
		@events[type] || @events[type] = []
		return if Object.prototype.toString.call(fn) isnt '[object Function]'
		@events[type].push fn

	off: (type) ->
		if (!arguments.length)
			@events = {}
		else
			@events[type] = []

	trigger: (type, args...) ->
		fn.apply this, args for fn in @events[type] if @events[type]

module.exports = Event