// Generated by CoffeeScript 1.7.1
(function() {
  var Animal, Class, Clazz, Event, dog,
    __slice = [].slice;

  Clazz = function() {
    var klass;
    klass = function() {
      return this.initialize.apply(this, arguments);
    };
    klass.prototype.initialize = function() {};
    klass.extend = function(options) {
      var key, value;
      for (key in options) {
        value = options[key];
        klass.prototype[key] = value;
      }
      return klass;
    };
    return klass;
  };

  Class = Clazz();

  Event = Class.extend({
    initialize: function() {
      this.events = {};

      /*
      			because coffee script always adds a return at the last line in a function
      			undefined is added here to avoid returning an object
      			which is not generated by the defined constructor
       */
      return void 0;
    },
    on: function(type, fn) {
      this.events || (this.events = {});
      this.events[type] || (this.events[type] = []);
      if (Object.prototype.toString.call(fn) !== '[object Function]') {
        return;
      }
      return this.events[type].push(fn);
    },
    off: function(type) {
      if (!arguments.length) {
        return this.events = {};
      } else {
        return this.events[type] = [];
      }
    },
    trigger: function() {
      var args, fn, type, _i, _len, _ref, _results;
      type = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this.events[type]) {
        _ref = this.events[type];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          fn = _ref[_i];
          _results.push(fn.apply(this, args));
        }
        return _results;
      }
    }
  });

  module.exports = Event;

  Animal = Event.extend({
    t: function() {
      return console.log('t');
    }
  });

  dog = new Animal;

  dog.on('eat', dog.t);

  dog.trigger('eat');

}).call(this);
